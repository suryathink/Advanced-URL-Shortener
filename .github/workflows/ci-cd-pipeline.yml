name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log into Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: suryathink/url-shortener-backend:latest

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client
      - name: Prepare and Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }} # Your EC2 instance's public IP or DNS
          EC2_USER: ${{ secrets.EC2_USER }} # For Ubuntu, typically "ubuntu"
          EC2_KEY: ${{ secrets.EC2_KEY }} # Your EC2 SSH private key stored as a secret
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          # Save the PEM key to a file and set correct permissions
          echo "${EC2_KEY}" | sed 's/\\n/\n/g' > url-shortener-backend.pem
          chmod 400 url-shortener-backend.pem
          # Test the SSH connection
          ssh -o StrictHostKeyChecking=no -i url-shortener-backend.pem ${EC2_USER}@${EC2_HOST} "echo Connected successfully"
          # Connect to EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i url-shortener-backend.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
            # Log into Docker Hub on the EC2 instance
            docker login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}"
            # Pull the latest backend image from Docker Hub
            docker pull suryathink/url-shortener-backend:latest
            # Navigate to your project folder (where docker-compose.yml and .env reside)
            cd ~/Advanced-URL-Shortener
            # (Optional) Stop running containers first
            docker-compose down
            # Start (or recreate) containers in detached mode; the .env file on EC2 is used
            docker-compose up -d
          EOF
